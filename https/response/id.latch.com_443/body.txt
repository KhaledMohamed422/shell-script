<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title></title>
  <base href="/">

  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
  <script src="//fast.appcues.com/64875.js"></script>
  <script type="text/javascript" src="//cdn.dwolla.com/v2.1.5/dwolla-web.js"></script>
  <script src="//cdn.plaid.com/link/v2/stable/link-initialize.js"></script>
  <script src="heap.js"></script>
<link rel="stylesheet" href="styles.1886188e645ae6e5a53e.css"></head>
<body>
  <!--
    Unsupported browser banner is implemented here in case our application immediately breaks in the unknown environment.
    It's hidden by default, and only displayed if we determine the current browser is unsupported.

    Because user-agent sniffing is fragile and often unreliable, we blacklist instead of whitelist. If we discover
    new browser environments that are unrealistic for us to support, we can just add them to the blacklist. This is
    preferable to a user seeing this banner in an environment that's actually supported just because we haven't tested
    it ourselves.

    Todo: perhaps this chunk of HTML/CSS/JS could live in it's own file and be dropped in here at build time?
  -->
  <div id="unsupported-browser" class="unsupported-browser">
    <div class="unsupported-browser-content">
      <h2>Browser not supported</h2>
      <div class="unsupported-browser-message" id="unsupported-browser-default-message">
        <p>
          For best results, please use a supported browser.
        </p>
        <p>
          <a href="https://www.google.com/chrome/browser/desktop/index.html" target="_blank">Chrome</a> |
          <a href="https://www.mozilla.org/en-US/firefox/new/" target="_blank">Firefox</a> |
          <a href="https://support.apple.com/downloads/safari" target="_blank">Safari</a> |
          <a href="https://www.microsoft.com/en-us/download/Internet-Explorer-11-for-Windows-7-details.aspx" target="_blank">Internet Explorer 11</a> |
          <a href="https://www.microsoft.com/en-us/windows/microsoft-edge" target="_blank">Microsoft Edge</a>
        </p>
      </div>
      <p class="unsupported-browser-message" id="unsupported-browser-safari-private-browsing-message">
        It looks like you're using Safari in Private Browsing mode, which unfortunately is not
        supported at this time.
      </p>
    </div>
    <button class="unsupported-browser-close" id="unsupported-browser-close">Dismiss</button>
  </div>
  <style type="text/css">
    .unsupported-browser {
      position: relative;

      font-family: TheReg, Helvetica, Arial, sans-serif;
      font-size: 16px;
      text-align: center;

      background-color: #fcfcfc;
      color: #000;
      padding: 20px;
      border-bottom: 1px solid #e6e6e6;

      /* Will be overridden if determined we're in an unsupported browser */
      display: none;
    }
    .unsupported-browser h2 {
      color: #d0021b;
    }
    .unsupported-browser p {
      margin: 0 0 .5em;
    }
    .unsupported-browser a {
      color: #000;
      text-decoration: underline;
    }
    .unsupported-browser-content {
      width: 100%;
      max-width: 800px;
      margin: 0 auto;
    }
    .unsupported-browser-message {
      display: none;
    }
    .unsupported-browser-close {
      position: absolute;
      top: 10px;
      right: 10px;
      background: none;
      border: 0;
      color: #000;
      text-decoration: underline;
      cursor: pointer;
    }
  </style>
  <script type="text/javascript">
    (function() {

      var BrowserNames = {
        msie: 'msie',
        opera: 'opera',
        safari: 'safari'
      };

      // As mentioned above, we just look for browsers we know we need to blacklist.
      function getBrowser() {
        var ua = navigator.userAgent;

        var msie = ua.indexOf('MSIE ');
        if (msie > 0) {
          // IE 10 or older => return version number
          return {
            name: BrowserNames.msie,
            version: parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10)
          };
        }

        var trident = ua.indexOf('Trident/');
        if (trident > 0) {
          // IE 11 => return version number
          var rv = ua.indexOf('rv:');
          return {
            name: BrowserNames.msie,
            version: parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10)
          };
        }

        var edge = ua.indexOf('Edge/');
        if (edge > 0) {
          // Edge (IE 12+) => return version number
          return {
            name: BrowserNames.msie,
            version: parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10)
          };
        }

        // We don't spend much time testing Opera, so we may want to disable it at some point,
        // but it uses the same Blink engine as Chrome, so safe to leave it enabled for now.
        var opera = /Opera|OPR/.test(ua);
        if (opera) {
          return {
            name: BrowserNames.opera,
            version: null
          };
        }

        var safari = /Safari/i.test(ua);
        if (safari) {
          return {
            name: BrowserNames.safari,
            version: null
          };
        }

        // If we don't need to blacklist, we don't care.
        return {
          name: null,
          version: null
        };
      }

      // Explicitly blacklist browsers we know our code does not work in.
      function getReason() {
        var browser = getBrowser();

        if (browser.name === BrowserNames.msie) {
          if (browser.version < 10) {
            return 'default';
          }
        }

        try {
          localStorage.setItem('test-safari-private-browsing', 'test-value');
          localStorage.removeItem('test-safari-private-browsing');
        } catch (e) {
          if (browser.name === BrowserNames.safari) {
            return 'safari-private-browsing';
          } else {
            return 'default';
          }
        }
      }

      var bannerEl = document.getElementById('unsupported-browser');
      var closeEl = document.getElementById('unsupported-browser-close');
      var defaultMessageEl = document.getElementById('unsupported-browser-default-message');
      var safariPrivateBrowsingMessageEl = document.getElementById('unsupported-browser-safari-private-browsing-message');
      function showBanner(reason) {
        bannerEl.style.display = 'block';
        if (reason === 'default') {
          defaultMessageEl.style.display = 'block';
        } else if (reason === 'safari-private-browsing') {
          safariPrivateBrowsingMessageEl.style.display = 'block';
        }
        // Todo: log an event?
      }
      closeEl.addEventListener('click', function(evt) {
        bannerEl.style.display = 'none';
      }, false);

      var reason = getReason();
      if (reason) {
        showBanner(reason);
      }

    })();
  </script>

  <latch-root></latch-root>
<script src="runtime-es2015.a4dadbc03350107420a4.js" type="module"></script><script src="runtime-es5.a4dadbc03350107420a4.js" nomodule defer></script><script src="polyfills-es5.aafb3e26755034ebe49e.js" nomodule defer></script><script src="polyfills-es2015.3473786400fbf3df6d48.js" type="module"></script><script src="scripts.9af509196ceec35dd2f5.js" defer></script><script src="main-es2015.fbbf8f16dd7631630b3b.js" type="module"></script><script src="main-es5.fbbf8f16dd7631630b3b.js" nomodule defer></script></body>
</html>

0




https://id.latch.com:443