<!DOCTYPE html><!-- This site was created in Webflow. https://www.webflow.com --><!-- Last Published: Sat Oct 28 2023 16:27:33 GMT+0000 (Coordinated Universal Time) --><html data-wf-domain="supernovas.indrive.com" data-wf-page="642417aaeaeaf732d9d8730e" data-wf-site="63c689973e158b0abde138f2"><head><meta charset="utf-8"/><title>Supernovas | About us</title><meta content="Supernovas is a non-profit soccer project for children from small communities" name="description"/><meta content="Supernovas | About us" property="og:title"/><meta content="Supernovas is a non-profit soccer project for children from small communities" property="og:description"/><meta content="Supernovas | About us" property="twitter:title"/><meta content="Supernovas is a non-profit soccer project for children from small communities" property="twitter:description"/><meta property="og:type" content="website"/><meta content="summary_large_image" name="twitter:card"/><meta content="width=device-width, initial-scale=1" name="viewport"/><meta content="Webflow" name="generator"/><link href="https://assets-global.website-files.com/63c689973e158b0abde138f2/css/supernovas.webflow.2c20ebf94.min.css" rel="stylesheet" type="text/css"/><link href="https://fonts.googleapis.com" rel="preconnect"/><link href="https://fonts.gstatic.com" rel="preconnect" crossorigin="anonymous"/><script src="https://ajax.googleapis.com/ajax/libs/webfont/1.6.26/webfont.js" type="text/javascript"></script><script type="text/javascript">WebFont.load({  google: {    families: ["Baloo 2:regular,500,600,700,800","El Messiri:regular,700:arabic,latin"]  }});</script><script type="text/javascript">!function(o,c){var n=c.documentElement,t=" w-mod-";n.className+=t+"js",("ontouchstart"in o||o.DocumentTouch&&c instanceof DocumentTouch)&&(n.className+=t+"touch")}(window,document);</script><link href="https://assets-global.website-files.com/63c689973e158b0abde138f2/63f4da79e2ba45e64867a314_favicon.png" rel="shortcut icon" type="image/x-icon"/><link href="https://assets-global.website-files.com/63c689973e158b0abde138f2/63f4da7d42615f449754af41_webclip.png" rel="apple-touch-icon"/><script src="https://www.google.com/recaptcha/api.js" type="text/javascript"></script><!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-WGXTQK9');</script>
<!-- End Google Tag Manager -->
<!-- [Attributes by Finsweet] Disable scrolling -->
<script defer src="https://cdn.jsdelivr.net/npm/@finsweet/attributes-scrolldisable@1/scrolldisable.js"></script>
<link rel="stylesheet" href="https://dl.dropboxusercontent.com/s/c2w80r5cnsjr40j/style.css"/></head><body><script src="https://d3e54v103j8qbb.cloudfront.net/js/jquery-3.5.1.min.dc5e7f18c8.js?site=63c689973e158b0abde138f2" type="text/javascript" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script><script src="https://assets-global.website-files.com/63c689973e158b0abde138f2/js/webflow.d78aa0309.js" type="text/javascript"></script><!-- Google Tag Manager (noscript) -->
<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-WGXTQK9"
height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
<!-- End Google Tag Manager (noscript) -->

<script src="https://dl.dropboxusercontent.com/s/ul27t2pzj9mu8x0/script.js"></script>


<!-- FORM HANDLER -->
<script> 
const urlParams = new URLSearchParams(window.location.search);

function addFormHandlerIfApplyForm() {
    const isApplyForm = document.getElementById("applyForm");
    if (isApplyForm != null) {
      const form = getApplyForm();
      const scriptURL = 'https://script.google.com/macros/s/AKfycbyKwgz2GA-ZT4WT39rZRXOE72fk0cGFxY2A5fX6y4-ZnByCuPynJU9ZFZ2PqExdfjIC/exec';
      let submittedBefore = false;

      form.addEventListener('submit', e => {
          e.preventDefault();
          if (!submittedBefore) {
              submittedBefore = true;
              let formData = new FormData(form);
              enrichWithAnalyticsData(formData);
              fetch(scriptURL, { method: 'POST', body: formData})
                  .then(response => console.log('Success!', response))
                  .catch(error => console.error('Error!', error.message))
              }
          });
      }
}

function getApplyForm() {
    return document.forms[0];
}

function enrichWithAnalyticsData(formData) {
    formData.append("referrer", window.location.href);
    if (urlParams.get("utm_source")) {
        formData.append("utm_source", urlParams.get("utm_source"));
    }
    if (urlParams.get("utm_medium")) {
        formData.append("utm_medium", urlParams.get("utm_medium"));
    }
    if (urlParams.get("utm_campaign")) {
        formData.append("utm_campaign", urlParams.get("utm_campaign"));
    }
    if (urlParams.get("utm_content")) {
        formData.append("utm_content", urlParams.get("utm_content"));
    }
    if (urlParams.get("utm_term")) {
        formData.append("utm_term", urlParams.get("utm_term"));
    }
    if (urlParams.get("utm_source_platform")) {
        formData.append("utm_source_platform", urlParams.get("utm_source_platform"));
    }
}
  
addFormHandlerIfApplyForm();
</script>

<!-- LINKS DECORATOR -->
<script>
function decorateLinksWithUtmIfNeeded() {
    const utmParams = getUtmParams();
    if (utmParams.length != 0) {
        decorateAllLinks(utmParams, urlParams);
    }
}

function getUtmParams() {
    return Array.from(urlParams.entries()).filter(param => param[0].startsWith("utm_"));
}


function decorateAllLinks(utmParams) {
    const links = document.getElementsByTagName("a");
    let utmParamsString = convertUtmParamsToString(utmParams);

    for (let i = 0; i < links.length; i++) {
        let currentLink = links[i].href;
        if (!linkAlreadyHasSameUtmParams(currentLink, utmParamsString)) {
            let newDecoratedLink;
            if (hasHashTag(currentLink)) {
                newDecoratedLink = getDecoratedHashTagLink(currentLink, utmParamsString);
            } else {
                newDecoratedLink = getDecoratedLink(currentLink, utmParamsString);
            }
            links[i].setAttribute("href", newDecoratedLink);
        } 
    }
}

function convertUtmParamsToString(params) {
    let paramsString = "";
    params.forEach((param) => {
        paramsString += param[0] + "=" + param[1];
        //all except last param
        if (params[params.length - 1] !== param) {
            paramsString += "&";
        }
    });
    return paramsString;
}

function linkAlreadyHasSameUtmParams(link, utmParamsString) {
    if (!link.includes("utm")) {
        return false;
    }

    let linkParams = link.split('?')[1];
    let linkSearchParams = new URLSearchParams(linkParams);
    
    let linkUtmParamsString = convertUtmParamsToString(getUtmParams(linkSearchParams)).split('#')[0];
    return utmParamsString === linkUtmParamsString;
}

function hasHashTag(link) {
    return link.includes('#');
}

function getDecoratedLink(link, utmParamsString) {
    let resultLink = getLinkWithStartCharacter(link);
    resultLink += utmParamsString;
    return resultLink;
}

function getDecoratedHashTagLink(link, utmParamsString) {
    let linkWithoutHashTag = link.split('#')[0];
    let hashTag = link.split('#')[1];
    let resultLink = getLinkWithStartCharacter(linkWithoutHashTag);
    resultLink += utmParamsString;
    resultLink += '#' + hashTag;
    return resultLink;
}

function getLinkWithStartCharacter(link) {
    return hasQueryParams(link) ? link += "&" : link += "?";
}

function hasQueryParams(link) {
    return link.includes('?');
}
  
decorateLinksWithUtmIfNeeded();
</script>

<!-- PHONE MASK (DIGITAL BUTLERS) -->
<script src="https://unpkg.com/imask"></script>
<script>
const initPhoneMask = () => {
	const PHONE_MASKS = new Map([
		['KZ', '+7 (000) 000 00 00'],
		['EG', '+2 (0000)000-00-00'],
		['GH', '+233 000 000 000'],
		['PE', '+51 000 000 000'],
		['CL', '+56 000 000 000'],
		['CO', '+57 000 000 0000'],
		['NG', '+234 000 000 0000'],
		['KE', '+254 000 000 000'],
		['', ''],
	]);

	const countrySelectElement = document.querySelector('[data-role="country-select"]');
	const phoneInputElement = document.querySelector('[data-role="phone-input"]');

	if (!countrySelectElement || !phoneInputElement) {
		return;
	}

	const maskOptions = {
		mask: '',
	};

	const mask = IMask(phoneInputElement, maskOptions);

	const updatePhoneMask = (event) => {
		const countryCode = event?.target?.value || countrySelectElement.value || '';
		const maskString = PHONE_MASKS.get(countryCode);

		if (maskString) {
			phoneInputElement.removeAttribute('disabled');
		} else {
			phoneInputElement.setAttribute('disabled', 'disabled');
			phoneInputElement.value = '';
		}

		mask.updateOptions({
			mask: maskString,
		});
	};

	countrySelectElement.addEventListener('change', updatePhoneMask);
	updatePhoneMask();
};
const initAgeMask = () => {
	const ageInputElement = document.querySelector('[data-role="age-input"]');

	if (!ageInputElement) {
		return;
	}

	const mask = IMask(ageInputElement, {
		mask: '00',
	});
};
const initDateMask = () => {
	const dateInputElement = document.querySelector('[data-role="date-input"]');

	if (!dateInputElement) {
		return;
	}

	const mask = IMask(dateInputElement, {
		mask: '00.00.0000 00:00',
	});
};

initAgeMask();
initPhoneMask();
initDateMask();
</script>

<script>
var lang = navigator.language || navigator.browserLanguage;
let utmParams = "";
if (getUtmParamsStringFromUrl().length != 0) {
	utmParams = getUtmParamsStringFromUrl();
}

if (lang.indexOf('kk') >= 0) 
{
 location.replace('/kz/home' + utmParams);
}
else if(lang.indexOf('ru') >= 0 || lang.indexOf('kk') >= 0)
{
 location.replace('/ru/home' + utmParams);
}
else if (lang.indexOf('ar') >= 0)
{
 location.replace('/ar/home' + utmParams);
}
else 
{
 location.replace('/en/home' + utmParams);
}

function getUtmParamsStringFromUrl() {
	    const url = window.location.search;
	    const urlParams = new URLSearchParams(url);
      const utmParamsArray = Array.from(urlParams.entries()).filter(param => param[0].startsWith("utm_"));
      return convertParamsToString(utmParamsArray);
}

function convertParamsToString(params) {
    let paramsString = "";
    params.forEach((param) => {
        paramsString += param[0] + "=" + param[1];
        //all except last param
        if (params[params.length - 1] !== param) {
            paramsString += "&";
        }
    });
    return paramsString == "" ? "" : "?" + paramsString;
}
</script></body></html>


https://supernovas.indrive.com:443